<?php

namespace ContainerAahIGl2;

use Symfony\Bridge\Monolog\Logger;
use Symfony\Bundle\FrameworkBundle\DependencyInjection\Compiler\AddDebugLogProcessorPass;
use Symfony\Component\VarDumper\Command\Descriptor\CliDescriptor;
use Symfony\Component\VarDumper\Command\Descriptor\HtmlDescriptor;
use Symfony\Component\VarDumper\Command\ServerDumpCommand;
use Symfony\Component\VarDumper\Server\DumpServer;
use function dirname;
use const DIRECTORY_SEPARATOR;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getVarDumper_Command_ServerDumpService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'var_dumper.command.server_dump' shared service.
     *
     * @return ServerDumpCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once dirname(__DIR__, 4) . '' . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'symfony' . DIRECTORY_SEPARATOR . 'console' . DIRECTORY_SEPARATOR . 'Command' . DIRECTORY_SEPARATOR . 'Command.php';
        include_once dirname(__DIR__, 4) . '' . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'symfony' . DIRECTORY_SEPARATOR . 'var-dumper' . DIRECTORY_SEPARATOR . 'Command' . DIRECTORY_SEPARATOR . 'ServerDumpCommand.php';
        include_once dirname(__DIR__, 4) . '' . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'symfony' . DIRECTORY_SEPARATOR . 'var-dumper' . DIRECTORY_SEPARATOR . 'Server' . DIRECTORY_SEPARATOR . 'DumpServer.php';
        include_once dirname(__DIR__, 4) . '' . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'symfony' . DIRECTORY_SEPARATOR . 'var-dumper' . DIRECTORY_SEPARATOR . 'Command' . DIRECTORY_SEPARATOR . 'Descriptor' . DIRECTORY_SEPARATOR . 'DumpDescriptorInterface.php';
        include_once dirname(__DIR__, 4) . '' . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'symfony' . DIRECTORY_SEPARATOR . 'var-dumper' . DIRECTORY_SEPARATOR . 'Command' . DIRECTORY_SEPARATOR . 'Descriptor' . DIRECTORY_SEPARATOR . 'CliDescriptor.php';
        include_once dirname(__DIR__, 4) . '' . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'symfony' . DIRECTORY_SEPARATOR . 'var-dumper' . DIRECTORY_SEPARATOR . 'Command' . DIRECTORY_SEPARATOR . 'Descriptor' . DIRECTORY_SEPARATOR . 'HtmlDescriptor.php';

        $a = new Logger('debug');
        $a->pushProcessor(($container->privates['debug.log_processor'] ?? $container->getDebug_LogProcessorService()));
        $a->pushHandler(($container->privates['monolog.handler.console'] ?? $container->getMonolog_Handler_ConsoleService()));
        $a->pushHandler(($container->privates['monolog.handler.main'] ?? $container->getMonolog_Handler_MainService()));
        AddDebugLogProcessorPass::configureLogger($a);

        $container->privates['var_dumper.command.server_dump'] = $instance = new ServerDumpCommand(new DumpServer('tcp://' . $container->getEnv('string:VAR_DUMPER_SERVER'), $a), ['cli' => new CliDescriptor(($container->privates['var_dumper.contextualized_cli_dumper.inner'] ?? $container->load('getVarDumper_ContextualizedCliDumper_InnerService'))), 'html' => new HtmlDescriptor(($container->privates['var_dumper.html_dumper'] ?? $container->getVarDumper_HtmlDumperService()))]);

        $instance->setName('server:dump');
        $instance->setDescription('Start a dump server that collects and displays dumps in a single place');

        return $instance;
    }
}
